#include "AmbientOccluder.h"
#include "Point3D.h"
#include "World.h"

AmbientOccluder::AmbientOccluder()
:Light(),sampler_ptr(NULL),u(),v(),w(), min_amount()
{
}

AmbientOccluder::~AmbientOccluder()
{
	if(sampler_ptr)
	{
		delete sampler_ptr;
		sampler_ptr = NULL;
	}
}

void AmbientOccluder::set_sampler(Sampler *s_ptr)
{
	if(sampler_ptr)
	{
		delete sampler_ptr;
		sampler_ptr = NULL;
	}
	sampler_ptr = s_ptr;
	sampler_ptr->map_samples_to_hemisphere(1);
}

Vector3D AmbientOccluder::get_direction(const ShadeRec &sr)
{
	Point3D sp = sampler_ptr->sample_hemisphere();
	return (sp.x * u + sp.y * v + sp.z * w);
}

bool AmbientOccluder::in_shadow(const Ray &ray, const ShadeRec &sr) const
{
	float t;
	int num_objects = sr.w.objects.size();

	bool in_shadow = false;

	for(int j = 0; j < num_objects; j++)
	{
		if(sr.w.objects[j]->casts_shadows())
		{	
			if(sr.w.objects[j]->shadow_hit(ray,t))
			{
				in_shadow = true;
			}

		}
				
	}
	return in_shadow;
}

//该函数还负责构造UVW

RGBColor AmbientOccluder::L(const ShadeRec &sr)
{
	w = sr.normal;
	v = w ^ Vector3D(0.0072,1.0,0.0034);
	v.normalize();
	u = v ^ w;

	Ray shadow_ray;
	shadow_ray.o = sr.hit_point;
	shadow_ray.d = get_direction(sr);

	if(in_shadow(shadow_ray,sr))
		return( min_amount * ls * color);
	else
		return (ls * color );
}

void AmbientOccluder::set_min_amount(float a)
{
	min_amount = RGBColor(a,a,a);
}