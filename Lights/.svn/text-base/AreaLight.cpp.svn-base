#include "AreaLight.h"
#include "Emissive.h"
#include "World.h"
#include <stddef.h>

AreaLight::AreaLight()
:object_ptr(NULL),material_ptr(NULL),sample_point(),light_normal(),wi()
{}

AreaLight::~AreaLight()
{
	if(object_ptr)
	{
		delete object_ptr;
		object_ptr = NULL;
	}

	if(material_ptr)
	{
		delete material_ptr;
		material_ptr = NULL;
	}
}


void AreaLight::set_object(GeometryObject* _optr)
{
	object_ptr = _optr;
	material_ptr = object_ptr->get_material();
}


//有副作用的函数
Vector3D AreaLight::get_direction(const ShadeRec &sr)
{
	sample_point = object_ptr->sample();
	light_normal = object_ptr->get_normal(sample_point);

	wi = sample_point - sr.hit_point;

	wi.normalize();

	return wi;
}


bool AreaLight::in_shadow(const Ray &ray, const ShadeRec &sr) const
{
	float t;
	int num_objects = sr.w.objects.size();

	float ts = (sample_point - ray.o) * ray.d;

	bool in_shadow = false;

	for(int j = 0; j < num_objects; j++)
	{
		if(sr.w.objects[j]->casts_shadows())
		{	
			if(sr.w.objects[j]->shadow_hit(ray,t) && t<ts)
			{
				in_shadow = true;
			}

		}
				
	}
	return in_shadow;
}

RGBColor AreaLight::L(const ShadeRec& sr)
{
	float ndotd = (-light_normal * wi); //单向光

	if( ndotd > 0.0 )
		return (material_ptr->get_Le(sr));
	else
		return RGBColor();
}

float AreaLight::G(const ShadeRec &sr) const
{
	float ndotd = -light_normal * wi;
	float d2 = sample_point.d_squared(sr.hit_point);

	return (ndotd / d2);
}

float AreaLight::pdf(const ShadeRec& sr)const
{
	return (object_ptr->pdf(sr));
}


