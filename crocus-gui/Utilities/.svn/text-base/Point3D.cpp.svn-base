#include "Point3D.h"
#include "Vector3D.h"
#include <cmath>

Point3D::Point3D()
:x(0),y(0),z(0)
{}

Point3D::Point3D(double _x, double _y, double _z)
:x(_x),y(_y),z(_z)
{}

Point3D::Point3D(const Point3D &p)
{
	x = p.x;
	y = p.y;
	z = p.z;
}

Point3D::~Point3D()
{}

Point3D Point3D::operator -(const Vector3D &v)const
{
	return Point3D(x-v.x,y-v.y,z-v.z);
}

Point3D Point3D::operator +(const Vector3D& v)const
{
	return Point3D(x+v.x,y+v.y,z+v.z);
}


Vector3D Point3D::operator -(const Point3D &p) const
{
	return Vector3D(x-p.x,y-p.y,z-p.z);
}

double Point3D::distance(const Point3D& p)const
{
	return  ((*this) - p).length();
}

double Point3D::d_squared(const Point3D& p)const
{
	return ((*this) - p ).len_squared();
}


Point3D operator* (const Matrix& mat, const Point3D& p) 
{
	return (Point3D(mat.m[0][0] * p.x + mat.m[0][1] * p.y + mat.m[0][2] * p.z + mat.m[0][3],
					mat.m[1][0] * p.x + mat.m[1][1] * p.y + mat.m[1][2] * p.z + mat.m[1][3],
					mat.m[2][0] * p.x + mat.m[2][1] * p.y + mat.m[2][2] * p.z + mat.m[2][3]));
}