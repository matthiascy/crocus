#pragma once

#include "Matrix.h"

class Point3D;
class Normal;

class Vector3D{
public:
	Vector3D();
	Vector3D(double _x,double _y,double _z);
	Vector3D(const Vector3D& v);
	Vector3D(const Point3D& p);
	Vector3D(const Normal& n);
	~Vector3D();

	void normalize();

	Vector3D& hat();

	Vector3D operator^(const Vector3D& rhs)const;

	Vector3D& operator= (const Vector3D v);

	Vector3D& operator= (const Point3D p);

	Vector3D operator-()const;

	Vector3D operator+ (const Vector3D& rhs)const;

	Vector3D operator- (const Vector3D& rhs)const;

	Vector3D operator/ (const double& a)const;

	double operator* (const Vector3D& b)const;

	double length()const;

	double len_squared()const;

public:
	double x,y,z;

};

//成员内联函数
inline Vector3D& Vector3D::operator= (const Vector3D v)
{
	x = v.x;
	y = v.y;
	z = v.z;

	return (*this);
}
inline Vector3D Vector3D::operator-()const
{
	return Vector3D(-x,-y,-z);
}

inline double Vector3D::operator*(const Vector3D& b)const //点积
{
	return (x * b.x + y * b.y + z * b.z);
}

inline Vector3D Vector3D::operator +(const Vector3D& rhs) const
{
	return Vector3D(x+rhs.x,y+rhs.y,z+rhs.z);
}

inline Vector3D Vector3D::operator -(const Vector3D& rhs) const
{
	return Vector3D(x - rhs.x, y - rhs.y, z - rhs.z);
}

inline Vector3D Vector3D::operator /(const double& a)const
{
	return Vector3D(x / a, y / a, z / a);
}

//非成员-内联函数
Vector3D operator*(const double a,const Vector3D& v); // a * v 左乘

inline Vector3D operator*(const double a,const Vector3D& v)
{
	return Vector3D(a*v.x,a*v.y,a*v.z);
}

Vector3D operator* (const Matrix& mat, const Vector3D& v);