#include "Whitted.h"
#include "ShadeRec.h"
#include "World.h"
#include "Material.h"

Whitted::Whitted(void)
:Tracer()
{
}

Whitted::Whitted(World *_world_ptr)
:Tracer(_world_ptr)
{}

Whitted::~Whitted(void)
{
}

RGBColor Whitted::trace_ray(Ray ray,int depth) const
{
	if( depth > world_ptr->vp.max_depth)
		return RGBColor();
	else
	{
		ShadeRec sr(world_ptr->hit_objects(ray));
		if(sr.hit_an_object)
		{
			sr.depth = depth;
			sr.ray = ray;

			return  (sr.material_ptr->shade(sr));
		}
		else
			return (world_ptr->background_color);
	}
}


RGBColor Whitted::trace_ray(Ray ray, double& tmin, const int depth) const {
	if (depth > world_ptr->vp.max_depth)
		return (black);
	else {
		ShadeRec sr(world_ptr->hit_objects(ray));    
					
		if (sr.hit_an_object) {
			sr.depth 	= depth;
			sr.ray 		= ray;	
			tmin		= sr.t;     // required for colored transparency 
			
			return (sr.material_ptr->shade(sr));   
		}
		else {
			tmin = kHugeValue;
			
			return (world_ptr->background_color);
		}
	}																																			
}