#include "Sphere.h"
#include "Vector3D.h"
#include "maths.h"


const double kEpsilon = 0.001;

Sphere::Sphere(void)
:GeometryObject(),center(),radius(1)
{
}

Sphere::Sphere(const Point3D &p,const double ray)
:GeometryObject(),center(p),radius(ray)
{}


Sphere::~Sphere(void)
{
}

void Sphere::set_radius(const float r)
{
	radius = r;
}

void Sphere::set_center(const Point3D c)
{
	center = c;
}


void Sphere::set_center(const float x,const float y, const float z)
{
	center = Point3D(x,y,z);
}

bool Sphere::hit(const Ray &ray, double& tmin,ShadeRec &sr) const
{
	double t;
	Vector3D temp = ray.o - center;
	double a = ray.d * ray.d;
	double b = 2.0 * temp * ray.d;
	double c = temp * temp - radius * radius;
	double disc = b * b - 4.0 * a * c;

	if(disc < 0.0)
		return false;
	else
	{
		double e = sqrt(disc);
		double demon = 2.0 * a;
		t = ( -b - e ) / demon;

		if( t > kEpsilon )
		{
			tmin = t;
			sr.normal 	 = (temp + t * ray.d) / radius;
			sr.local_hit_point = ray.o + t * ray.d;
			return true;
		}

		t = (-b + e) / demon;
		if( t > kEpsilon )
		{
			tmin = t;
			sr.normal   = (temp + t * ray.d) / radius;
			sr.local_hit_point = ray.o + t * ray.d;
			return true;
		}

	}
	return false;
}


bool Sphere::shadow_hit(const Ray& ray,float& tmin)const
{
	double t;
	Vector3D temp = ray.o - center;
	double a = ray.d * ray.d;
	double b = 2.0 * temp * ray.d;
	double c = temp * temp - radius * radius;
	double disc = b * b - 4.0 * a * c;

	if(disc < 0.0)
		return false;
	else
	{
		double e = sqrt(disc);
		double demon = 2.0 * a;

		t = ( -b - e ) / demon;

		if( t > kEpsilon )
		{
			tmin = t;

			return true;
		}

		t = (-b + e) / demon;
		if( t > kEpsilon )
		{
			tmin = t;
			return true;
		}

	}
	return false;
}


BBox Sphere::get_bounding_box()const
{
	double delta = 0.0001;
	return BBox(center.x-radius-delta,center.y-radius-delta,center.z-radius-delta,center.x+radius+delta,center.y+radius+delta,center.z+radius+delta);
}