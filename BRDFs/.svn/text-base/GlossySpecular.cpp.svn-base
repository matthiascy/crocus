#include "GlossySpecular.h"
#include "Vector3D.h"
#include "Point3D.h"
#include "Maths.h"
#include "MultiJittered.h"

GlossySpecular::GlossySpecular()
: BRDF(),ks(0),cs(1),exp(1)
{}

GlossySpecular::~GlossySpecular()
{}



void GlossySpecular::set_ks(const float _ks)
{
	ks = _ks;
}

void GlossySpecular::set_cs(const float r, const float g, const float b)
{
	cs = RGBColor(r,g,b);
}

void GlossySpecular::set_cs(const RGBColor&	c)
{
	cs = c;
}

void GlossySpecular::set_exp(const float& e)
{
	exp = e;
}


void GlossySpecular::set_samples(const int num_samples, const float exp)
{
	if(sampler_ptr)
	{
		delete sampler_ptr;
		sampler_ptr = NULL;
	}
	sampler_ptr = new MultiJittered(num_samples);
	sampler_ptr->map_samples_to_hemisphere(exp);//��һ��������pdf��ѡȡ
}

RGBColor GlossySpecular::f(const ShadeRec& sr,const Vector3D& wo,const Vector3D& wi)const
{
	RGBColor L;
	float ndotwi = sr.normal * wi;
	Vector3D r(-wi +  2.0  * ndotwi * sr.normal);
	float rdotwo = r * wo;

	if(rdotwo > 0.0)
	{
		L = ks * cs * pow(rdotwo,exp);
	}

	return L;
}


RGBColor GlossySpecular::sample_f(const ShadeRec& sr, const Vector3D& wo,Vector3D& wi)const
{
	return RGBColor();
}

RGBColor GlossySpecular::sample_f(const ShadeRec& sr, const Vector3D& wo, Vector3D& wi, float& pdf) const
{
	Normal n(sr.normal);
	float ndotwo = n * wo;

	if(ndotwo < 0.0)
	{
		n = -n;
		ndotwo *= -1;
	}

	Vector3D r = -wo + 2.0 * ndotwo * n;

	Vector3D w = r;
	Vector3D u = Vector3D(0.00424, 1, 0.00764) ^ w;
	u.normalize();
	Vector3D v = u ^ w;
	Point3D sp = sampler_ptr->sample_hemisphere();

	wi = sp.x * u + sp.y * v + sp.z * w;

	if(n * wi < 0.0)
	{
		wi = -sp.x * u - sp.y * v + sp.z * w;
	}

	float phong_lobe = pow( float(r*wi),exp);
	pdf = phong_lobe * (n * wi); //?

	return (ks * cs * phong_lobe);
}

RGBColor GlossySpecular::rho(const ShadeRec& sr, const Vector3D& wo)const
{
	return RGBColor();
}
